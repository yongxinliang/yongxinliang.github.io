<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compose on Compose Docs</title>
    <link>https://yongxinliang.github.io/</link>
    <description>Recent content in Compose on Compose Docs</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://yongxinliang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mark Daily Master</title>
      <link>https://yongxinliang.github.io/docs/compose/note0521/</link>
      <pubDate>Sun, 21 May 2023 23:58:24 +0800</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/compose/note0521/</guid>
      <description>2023.5.27 国内经济核心问题 1.国家对私企的态度
2.国家对互联网企业的定位
3.国家对房地产、百姓财富的态度，如何软着陆？
4.出口问题
2023.5.27 目前国内行情感悟 治大国如烙大饼，百姓命如草芥，唯贪官与“专家”橫行，颠倒黑白，真乃倒反天罡之世界。
2023.6.1 润 4个月了。
2023.6.2 走了
2023.6.4 资产负债表衰退 中国国企占据国内80%社会资源 中国中产阶级：高于70%与房产绑定 城投公司债台高筑--&amp;gt;当地农商行转移 IT行业本身，属于国外资本，对于该行业的发展，国家会加大打击力度或控制其发展，例如：阿里巴巴，字节跳动等成立党支部的举措。 Self Position A Man , not a Flunkey. An Enginer ,not a Coder. Ideal Target At least，for the more. Note 6/8 虽对所处环境有所抱怨，这个狗屎一样的社会，的确，但换个角度，谁有敢说自己干净？身边的每个人，包括亲戚、朋友、乃至自己，谁又不是在妥协，向这个垃圾世道低头；说来也怪自己，一直没有去死的勇气，要不怎么会允许周边老狗子在身边作威作福，肯定是，原因出在自己身上。 </description>
    </item>
    
    <item>
      <title>Install theme</title>
      <link>https://yongxinliang.github.io/docs/compose/install-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/compose/install-theme/</guid>
      <description>Prerequisites First ensure that you have hugo installed.
You need a recent extended version (we recommend version 0.61 or later) of Hugo to do local builds and previews of sites (like this one) that uses this theme.
If you install from the release page, make sure to get the extended Hugo version, which supports sass; you may need to scroll down the list of releases to see it.
For comprehensive Hugo documentation, see gohugo.</description>
    </item>
    
    <item>
      <title>Use forestry CMS</title>
      <link>https://yongxinliang.github.io/docs/compose/use-forestry-cms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/compose/use-forestry-cms/</guid>
      <description>Do you prefer managing your site using a CMS? Or would you like to make it easier for someone (a non-techie, perhaps) in your team to make edits easily? If interested, follow along. Else, skip to the next section
Let&#39;s sync your site with forestry CMS.
Prerequisites !! Obviously you ought to have a github account. This is where your website source will live. Basically, forestry will read from github and write (commmit) to your github repo.</description>
    </item>
    
    <item>
      <title>Content organization</title>
      <link>https://yongxinliang.github.io/docs/compose/organize-content/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/compose/organize-content/</guid>
      <description>This theme is primarily meant for documentation.
Documentation By default, the theme will look for all your documentation content within the docs directory.
However, if you would like to have your docs content across multiple directories, please list those directories inside config/_default/params.toml under docSections like so:
...docSections = [&amp;#34;docs&amp;#34;, &amp;#34;tutorials&amp;#34;]... Unlike other regular pages, the documentation pages will have a left sidebar. This sidebar will list links to all the pages in the documentation pages.</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>https://yongxinliang.github.io/docs/compose/shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/compose/shortcodes/</guid>
      <description>Instead of writing all your site pages from scratch, Hugo lets you define and use shortcodes.
Why shortcodes? While markdown is sufficient to produce simple pages, it&#39;s insufficient where complex page structures are needed. Thusly, whenever we need special styling, shortcodes compliment the shortcomings of markdown.
This way, you can side step complex html and css boilerplate in your content files.
Sometimes, the shortcode will wrap content, sometimes it won&#39;t. When content is wrapped, a closing shortcode tag is needed.</description>
    </item>
    
    <item>
      <title>Search Function</title>
      <link>https://yongxinliang.github.io/docs/compose/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/compose/search/</guid>
      <description>Firstly, ensure you have these lines inside your config.toml file
1[outputs] 2 home = [&amp;#34;HTML&amp;#34;, &amp;#34;RSS&amp;#34;,&amp;#34;JSON&amp;#34;] Compose implements Fuse js or Algolia to enable search functionality. By default Fuse is applied. Algolia can be enabled by adding this settings to config/_default/params.toml file
1# search 2[search] 3on = true 4global = false 5[search.algolia] 6enable = false # if false search will default to fusejs 7id = &amp;#34;Q40WQQX84U&amp;#34; # Application ID 8index = &amp;#34;compose&amp;#34; # Index name 9key = &amp;#34;da87401a458102ec6bbd6cc5e5cf8d95&amp;#34; # Search-Only API Key Both search engines will display results using the same UI.</description>
    </item>
    
    <item>
      <title>Mermaid</title>
      <link>https://yongxinliang.github.io/docs/compose/mermaid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/compose/mermaid/</guid>
      <description>Mermaid is library that helps you generate diagrams, flowcharts, and piecharts from text in a similar manner as markdown.
With compose theme, you can use mermaid using a custom shortcode as follows:
Sequence Diagrams Syntax
1{{&amp;lt; mermaid &amp;gt;}} 2sequenceDiagram 3 participant Alice 4 participant Bob 5 Alice-&amp;gt;&amp;gt;John: Hello John, how are you? 6 loop Healthcheck 7 John-&amp;gt;&amp;gt;John: Fight against hypochondria 8 end 9 Note right of John: Rational thoughts&amp;lt;br/&amp;gt;prevail... 10 John--&amp;gt;&amp;gt;Alice: Great!</description>
    </item>
    
    <item>
      <title>Mermaid</title>
      <link>https://yongxinliang.github.io/tutorials/example/mermaid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/tutorials/example/mermaid/</guid>
      <description>Mermaid is library that helps you generate diagrams, flowcharts, and piecharts from text in a similar manner as markdown.
With compose theme, you can use mermaid using a custom shortcode as follows:
Sequence Diagrams Syntax
1{{&amp;lt; mermaid &amp;gt;}} 2sequenceDiagram 3 participant Alice 4 participant Bob 5 Alice-&amp;gt;&amp;gt;John: Hello John, how are you? 6 loop Healthcheck 7 John-&amp;gt;&amp;gt;John: Fight against hypochondria 8 end 9 Note right of John: Rational thoughts&amp;lt;br/&amp;gt;prevail... 10 John--&amp;gt;&amp;gt;Alice: Great!</description>
    </item>
    
    <item>
      <title>Graphs, charts &amp; dynamic tables</title>
      <link>https://yongxinliang.github.io/docs/compose/graphs-charts-tables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/compose/graphs-charts-tables/</guid>
      <description>Using chart js library you can display data you have stored in a csv file as a pie chart, bar graph or doughnut chart.
At this point if you want to display data from a json or yaml file, you would need to convert it into csv first. Else the template will error out.
Once you have a csv file, you display the charts as follows:
Show a pie, doughnut &amp;amp; bar chart at once Firstly define the data you want to display from the front matter:</description>
    </item>
    
    <item>
      <title>Customize layouts &amp; components</title>
      <link>https://yongxinliang.github.io/docs/compose/customize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/compose/customize/</guid>
      <description>Shortcodes modifiers These modifiers are classes you can use with shortcodes to customize the look and feel of your layouts and components.
Grid modifier space grid-2 2 columns grid-3 3 columns grid-4 4 columns Spacing modifier space mt-1 1.5rem top margin mt-2 3rem top margin mt-3 4.5rem top margin mt-4 6rem top margin use pt-1 ~ pt-4 for top padding
modifier space mb-1 1.5rem bottom margin mb-2 3rem bottom margin mb-3 4.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://yongxinliang.github.io/docs/clarity/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/clarity/getting-started/</guid>
      <description>Prerequisites Firstly, ensure you have installed the extended version of Hugo. See installation steps from Hugo&#39;s official docs.
Getting up and running Read the prerequisites above and verify you&#39;re using the extended version of Hugo. There are at least two ways of quickly getting started with Hugo and the VMware Clarity theme:
Option 1 (recommended) Generate a new Hugo site and add this theme as a Git submodule inside your themes folder:</description>
    </item>
    
    <item>
      <title>Leverage Github actions</title>
      <link>https://yongxinliang.github.io/docs/compose/github-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/compose/github-actions/</guid>
      <description>This theme ships with 2 github actions inside the exampleSite folder:
AWS CI Algolia CI AWS CI This helps you to autodeploy your hugo website from github to an AWS s3 bucket. Set the secrets in the action accordingly and voila.
Algolia CI This action will automatically update your algolia search index. No extra npm manual setup will be needed.
These actions are customizable to fire off under your specified set of circumstances.</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>https://yongxinliang.github.io/docs/clarity/features/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/clarity/features/</guid>
      <description>Blog with tagging and category options
Deeplinks
Native Image Lazy Loading
Customizable (see config)
Dark Mode (with UI controls for user preference setting)
Toggleable table of contents
Flexible image configuration
Logo alignment
Mobile support with configurable menu alignment
Syntax Highlighting
Rich code block functions including:
Copy to clipboard Toggle line wrap (dynamic) Toggle line numbers Language label Toggle block expansion/contraction (dynamic) To put it all in context, here is a preview showing all functionality.</description>
    </item>
    
    <item>
      <title>Customization</title>
      <link>https://yongxinliang.github.io/docs/clarity/customize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/clarity/customize/</guid>
      <description>Configuration If set, jump over to the config.toml file and start configuring your site.
This section will mainly cover settings that are unique to this theme. If something is not covered here (or elsewhere in this file), there&#39;s a good chance it is covered in this Hugo docs page.
Global Parameters These options set global values that some pages or all pages in the site use by default.
Parameter Value Type Overidable on Page author string no twitter string no largeTwitterCard boolean no ga_analytics string no description string yes introDescription string no numberOfTagsShown integer no fallBackOgImage file path (string) no codeMaxLines integer yes codeLineNumbers boolean yes mainSections array/string no centerLogo boolean no logo file path (string) no mobileNavigation string no figurePositionShow boolean yes figurePositionLabel string no customCSS array of file path (string) no customJS array of file path (string) no enforceLightMode boolean N/A enforceDarkMode boolean N/A titleSeparator string no comment boolean no Page Parameters These options can be set from a page frontmatter or via archetypes.</description>
    </item>
    
    <item>
      <title>Manipulating Images</title>
      <link>https://yongxinliang.github.io/docs/clarity/images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/clarity/images/</guid>
      <description>Images Image figure captions You have the option of adding captions to images in blog posts and automatically prepending a desired string such as &amp;quot;Figure N&amp;quot; to the alt text. This is controlled via two global settings.
figurePositionLabel is a string which will be prepended to any alt text of an article image. By default, this is set to &amp;quot;Figure.&amp;quot; And figurePositionShow controls, globally, whether to show this label. It does not affect whether to show the image alt text, only the prefix figure caption.</description>
    </item>
    
    <item>
      <title>Blogging</title>
      <link>https://yongxinliang.github.io/docs/clarity/blogging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/clarity/blogging/</guid>
      <description>Blog directory Edit the config.toml file and change the blogDir key. Value will be name of the folder where the blog articles reside.
1[params] 2... 3blogDir = &amp;#34;blog&amp;#34; 4... For more info, see the Hugo docs.
Mobile menu positioning The navigation menu when mobile browsing can be configured in config.toml to open right or left depending on preference. The &amp;quot;hamburger&amp;quot; menu icon will always display in the upper right hand corner regardless.</description>
    </item>
    
    <item>
      <title>Syntax Highlighting</title>
      <link>https://yongxinliang.github.io/docs/clarity/syntax-highlighting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/clarity/syntax-highlighting/</guid>
      <description>Code Display line numbers Choose whether to display line numbers within a code block globally with the parameter codeLineNumbers setting to true or false.
1[params] 2... 3codeLineNumbers = true # Shows line numbers for all code blocks globally. 4... Limit code block height You can globally control the number of lines which are displayed by default for your code blocks. Code which has the number of lines exceed this value will dynamically cause two code block expansion buttons to appear, allowing the user to expand to full length and contract.</description>
    </item>
    
    <item>
      <title>Theme Overrides</title>
      <link>https://yongxinliang.github.io/docs/clarity/theme-overrides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/clarity/theme-overrides/</guid>
      <description>Custom CSS and JS To minimize HTTP requests per page, we would recommend loading CSS styles and JavaScript helpers in single bundles. That is to say, one CSS file and one JavaScript file. Using Hugo minify functions, these files will be minified to optimize the size.
Going by the above 👆🏻 reason, we recommend adding custom CSS and JS via the custom SASS file (Compose, Clarity) and the custom JS file (Compose, Clarity).</description>
    </item>
    
    <item>
      <title>保证数据的一致性</title>
      <link>https://yongxinliang.github.io/docs/compose/%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Sun, 28 May 2023 10:05:19 +0800</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/compose/%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>关于供应链的一些思考</title>
      <link>https://yongxinliang.github.io/docs/clarity/%E5%85%B3%E4%BA%8E%E4%BE%9B%E5%BA%94%E9%93%BE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</link>
      <pubDate>Sat, 27 May 2023 20:19:20 +0800</pubDate>
      
      <guid>https://yongxinliang.github.io/docs/clarity/%E5%85%B3%E4%BA%8E%E4%BE%9B%E5%BA%94%E9%93%BE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://yongxinliang.github.io/blog/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/blog/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://yongxinliang.github.io/blog/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/blog/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&#39;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&#39;t cover using CSS to style your theme.
We&#39;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://yongxinliang.github.io/blog/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/blog/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://yongxinliang.github.io/blog/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/blog/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://yongxinliang.github.io/blog/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/blog/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.pngshould become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.pngAdditionally, you&#39;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://yongxinliang.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yongxinliang.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
